import random
import matplotlib
from matplotlib import animation
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from itertools import count
from matplotlib.lines import Line2D
from Grid_array import num_vaccinated, num_recovered, num_dead, num_infected, num_susceptible
%matplotlib qt

#test variables:
    #infected_list = (1,2,3,4,6,8,12,16,22,28,36,46,59,73,76,82,85,87,90,93,96,99,100)
    #suseptable_list = (100,99,98,97,96,80,70,60,50,40,30,25,23,21,20,15,10,8,6,4,2,1)
    #total_people = 100
    #duration = 100#int(input("input the duration of the simulation"))


# Use a count variable in grid_array to add each number of infected, suspetable, recovered and dead people to a
# list which can then iterate each member of the list onto the graph.

#Using the list I can iterate through adding each member to the memeber before and dividing it by the total number
# of suseptable hexagons and multiplying by 100 to get the percentage of infected, dead, recovered or suspetable
#and append these values to the graph

#function to calculate the percentage of each item in a list
def calc_percent(total_people, list):
    percentage = (list/total_people)*100
    return percentage
    
#This iterates through the lists calculating the percentages to then append to the empty lists for the graph

l1 = [calc_percent(num_susceptible[0], num_susceptible[i]) for i in range(0, len(num_susceptible))]#susceptible

l2 = [calc_percent(num_susceptible[0], num_infected[i]) for i in range(0, len(num_infected))]#infected

l3 = [calc_percent(num_susceptible[0], num_recovered[i]) for i in range(0, len(num_recovered))]#recovered

l4 = [calc_percent(num_susceptible[0], num_dead[i]) for i in range(0, len(num_dead))]#dead

l5 = [calc_percent(num_susceptible[0], num_vaccinated[i]) for i in range(0, len(num_vaccinated))]#vaxed


#customising the axes and the style used in ploting
fig, axes = plt.subplots(nrows = 1, ncols = 1, figsize = (15,5))
axes.set_ylim(0, 100, 0.5)
axes.set_xlim(0, len(num_susceptible), 0.5)
plt.xlabel("days")
plt.ylabel("percentage")
plt.style.use("seaborn-whitegrid")


#This creates an empty list which after each iterationn of i appends that value to the list in order for it to be plotted
x1,y1,y2,y3,y4,y5 = [], [], [], [], [], []
xval = count(0,1)
def animate(i):
    x1.append(next(xval))
    y1.append((l1[i]))
    y2.append((l2[i]))
    y3.append((l3[i]))
    y4.append((l4[i]))
    y5.append((l5[i]))
    

    #plots each line with the line customisation
    axes.plot(x1,y1, color="red")
    axes.plot(x1,y2, color="green", linewidth=5)
    axes.plot(x1,y3, color="blue")
    axes.plot(x1,y4, color="black")
    axes.plot(x1,y5, color="yellow")
    
anim = FuncAnimation(fig, animate, interval=100)

#creating a legend for the lines to show what each coloured line means
custom_lines = [Line2D([0], [0], color='red', lw=4,alpha=0.6),
                Line2D([0], [0], color='green', lw=4,alpha=0.6),
                Line2D([0], [0], color='blue', lw=4,alpha=0.6),
                Line2D([0], [0], color='black', lw=4,alpha=0.6),
                Line2D([0], [0], color='yellow', lw=4,alpha=0.6)]

plt.legend(custom_lines, ['susceptible','infected', 'recovered', 'dead', 'vaxcinated'])
# customize the x ticks
#plt.xticks([e+1 for e in x1])
